from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LogisticRegression
from matplotlib.colors import ListedColormap
import warnings
from distutils.version import LooseVersion as Version

def sigmoid(z):
	return 1.0 / (1.0 + np.exp(-z))

def versiontuple(v):
    return tuple(map(int, (v.split("."))))

def plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):

    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])

    # plot the decision surface
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())

    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],
                    alpha=0.8, c=cmap(idx),
                    marker=markers[idx], label=cl)

    # highlight test samples
    if test_idx:
        # plot all samples
        if not versiontuple(np.__version__) >= versiontuple('1.9.0'):
            X_test, y_test = X[list(test_idx), :], y[list(test_idx)]
            warnings.warn('Please update to NumPy 1.9.0 or newer')
        else:
            X_test, y_test = X[test_idx, :], y[test_idx]

        plt.scatter(X_test[:, 0],
                    X_test[:, 1],
                    c='',
                    alpha=1.0,
                    linewidths=1,
                    marker='o',
                    s=55, label='test set')
#1
print(25 * '=',' 1 ',25 * '=')
iris = datasets.load_iris()
X = iris.data[:, [2, 3]]
y = iris.target

for i in range(1,6):
	print(X[i])

print(25 * '=',' 2 ',25 * '=')
#2
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, random_state=0)
sc = StandardScaler()
sc.fit(X_train)
X_train_std = sc.transform(X_train)
X_test_std = sc.transform(X_test)

for i in range (1,6):
	print(X_train_std[i])


#3
print(25 * '=',' 3 ',25 * '=')

z = np.arange(-7, 7, 0.1)
phi_z = sigmoid(z)
plt.plot(z, phi_z)
plt.axvline(0.0, color='k')
plt.axhspan(0.0, 1.0, facecolor='1.0', alpha=1.0, ls='dotted')
plt.axhline(y=0.5, ls='dotted', color='k')
plt.yticks([0.0, 0.5, 1.0])
plt.ylim(-0.1, 1.1)
plt.xlabel('z')
plt.ylabel('$\phi (z)$')
plt.show()

#4
print(25 * '=',' 4 ',25 * '=')
X_combined_std = np.vstack((X_train_std, X_test_std))
y_combined = np.hstack((y_train, y_test))

lr = LogisticRegression(C=1000.0, random_state=0)
lr.fit(X_train_std, y_train)

plot_decision_regions(X_combined_std, y_combined, classifier=lr, test_idx=range(105,150))
plt.xlabel('petal length [standardized]')
plt.ylabel('petal width [standardized]')
plt.legend(loc='upper left')
plt.show()

#5

print(X_test_std)


#print('Predicted probabilities', lr.predict_proba(X_test_std[0, :].reshape(1, -1)))
#for i in range (len(X_test_std)):
#	print('Predicted probabilities', lr.predict_proba(X_test_std[i, :].reshape(1, -1)))
#	proba=lr.predict_proba(X_test_std[i, :].reshape(1, -1))
#	print('Predicted of probabilities',proba)
print(25 * '=',' 5 ',25 * '=')

proba1=lr.predict_proba(X_test_std[0, :].reshape(1, -1))
print("1", X_test_std[0, :].reshape(1, -1))
print (proba1)
proba2=lr.predict_proba(X_test_std[5, :].reshape(1, -1))
print("2", X_test_std[5, :].reshape(1, -1))
print (proba2)
proba3=lr.predict_proba(X_test_std[13, :].reshape(1, -1))
print("3", X_test_std[13, :].reshape(1, -1))
print (proba3)
#6
print( '==== 6 ====')
weights, params = [], []
for c in np.arange(-5.0, 5.0):
	lr = LogisticRegression(C=10**c, random_state=0)
	lr.fit(X_train_std, y_train)
	weights.append(lr.coef_[1])
	params.append(10**c)

weights = np.array(weights)
plt.plot(params, weights[:, 0],
         label='petal length')
plt.plot(params, weights[:, 1], linestyle='--',
         label='petal width')
plt.ylabel('weight coefficient')
plt.xlabel('C')
plt.legend(loc='upper left')
plt.xscale('log')
plt.show()
